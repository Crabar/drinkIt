<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark ToggleButton component.  

     @see spark.components.ToggleButton
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
                   xmlns:s="library://ns.adobe.com/flex/spark" 
                   xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
                   minWidth="21" minHeight="21" 
                   alpha.disabledStates="0.5">
    
    <!-- host component -->
    <fx:Metadata>
    <![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.ToggleButton")]
    ]]>
    </fx:Metadata>
	<fx:Script>
		<![CDATA[
			import design.DesignModel;
			import flash.filters.BitmapFilterType;
		]]>
	</fx:Script>
    
    <fx:Script fb:purpose="styling">
        /* Define the skin elements that should not be colorized. 
           For toggle button, the graphics are colorized but the label is not. */
        static private const exclusions:Array = [];

        /**
         * @private
         */    
        override public function get colorizeExclusions():Array {return exclusions;}
        
        /**
         * @private
         */
        override protected function initializationComplete():void
        {
            useChromeColor = true;
            super.initializationComplete();
        }
        
        /**
         * @private
         */
        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
        {
            var cr:Number = getStyle("cornerRadius");
            
            if (cornerRadius != cr)
            {
                cornerRadius = cr;
				body.radiusX = cornerRadius;
            }            
            
            super.updateDisplayList(unscaledWidth, unscaledHeight);
        }
        
        private var cornerRadius:Number = 2;
    </fx:Script>
    
    <!-- states -->
    <s:states>
        <s:State name="up" />
        <s:State name="over" stateGroups="overStates" />
        <s:State name="down" stateGroups="downStates" />
        <s:State name="disabled" stateGroups="disabledStates" />
        <s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates" />
        <s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
        <s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
        <s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates" />
    </s:states>
    
    <s:Rect id="body" left="0" right="0" top="0" bottom="2">
		<s:fill>
			<s:SolidColor color="{DesignModel.LIGHT_GREEN}" />
		</s:fill>
		<s:fill.overStates>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="{DesignModel.SAND_BEACH}" ratio="0" />
				<s:GradientEntry color="{DesignModel.ORANGE_BEACH}" ratio="1" />
			</s:LinearGradient>
		</s:fill.overStates>
		<!--<s:stroke.selectedStates>
			<s:SolidColorStroke weight="2" color="{DesignModel.LIGHT_PINK}" />
		</s:stroke.selectedStates>-->
		<s:filters>
			<s:DropShadowFilter excludeFrom="selectedStates" angle="0" blurX="4" blurY="4" color="0x333333" distance="1" />
			<s:BevelFilter includeIn="selectedStates" angle="45" blurX="2" blurY="1" highlightAlpha="0.3" highlightColor="0x000000"
						   shadowColor="0x111111" shadowAlpha="0.1" type="{BitmapFilterType.INNER}" distance="2" strength="1" />
			<s:GlowFilter includeIn="selectedStates" alpha="0.1" blurX="64" blurY="64" color="0x111111" inner="true" strength="24" />
		</s:filters>
	</s:Rect>
    
</s:SparkButtonSkin>
