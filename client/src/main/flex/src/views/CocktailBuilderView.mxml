<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" xmlns:flextras="spark.flextras.autoCompleteComboBox.*" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="1024" height="768" xmlns:components="components.*" creationComplete="creationCompleteHandler(event)">
	<s:layout>
		<s:VerticalLayout />
	</s:layout>
	<fx:Script>
		<![CDATA[
			import controllers.SearchViewController;
			
			import design.DesignModel;
			
			import models.SearchViewModel;
			import models.supportClasses.CocktailTypes;
			import models.supportClasses.OptionalParameters;
			
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;
			
			import utils.MockData;
			
			[Bindable]
			private var _model:SearchViewModel;
			private var _controller:SearchViewController;
			
			protected function combobox1_changeHandler(event:IndexChangeEvent):void
			{
				if (event.newIndex >= 0)
				{
					_controller.addIngredientToQuery(ingrChoose.selectedItem);
					startSearch();
				}
					

				ingrChoose.selectedIndex = -1;				
				ingrChoose.validateProperties();
				//
							
			}
			
			private function startSearch():void
			{
				var types:Array = [];
				var ingredients:Array = [];
				var optionals:Array = [];
				//
				var elem:ToggleButton;
				
				for (var i:uint = 0; i < cocktailTypesGroup.numElements; i++)
				{
					elem = ToggleButton(cocktailTypesGroup.getElementAt(i));
					
					if (elem.selected)
						types.push(uint(elem.name));
				}
				
				for (var j:uint = 0; j < optionalsGroup.numElements; j++)
				{
					elem = ToggleButton(optionalsGroup.getElementAt(j));
					
					if (elem.selected)
						optionals.push(uint(elem.name));
				}
				
				for (var k:uint = 0; k < _model.ingredientsQueryList.length; k++)
				{
					ingredients.push(_model.ingredientsQueryList.getItemAt(k).id);
				}
				
				_controller.performSearch(types, ingredients, optionals);
			}
			
			private function filterCBList(item:Object):Boolean
			{
				var inputValue:String = ingrChoose.typeAheadText.toLowerCase();
				
				if (String(item.cname).toLowerCase().search(inputValue) > -1 && (_model.ingredientsQueryList.getItemIndex(item) == -1))             
					return true;
				
				return false;
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				_model = new SearchViewModel();
				_controller = new SearchViewController(_model);
				//
				_controller.requestIngredients();
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:HGroup id="searchPanel" width="100%" height="200">
		<s:VGroup width="210" height="100%" paddingLeft="5" paddingRight="5">
			<s:TextInput width="192" prompt="название коктейля..."/>
			<s:HGroup id="cocktailTypesGroup" width="192" height="64" gap="3">
				<s:ToggleButton width="64" height="64" name="{CocktailTypes.LONG_DRINK}" toolTip="Long drink" cornerRadius="10" />
				<s:ToggleButton width="64" height="64" name="{CocktailTypes.SHORT_DRINK}" icon="@Embed(source='/../assets/long_cocktail.png')" toolTip="Short drink" cornerRadius="10" />
				<s:ToggleButton width="64" height="64" name="{CocktailTypes.SHOOTER}" icon="@Embed(source='/../assets/long_cocktail.png')" toolTip="Shooter" cornerRadius="10" />
			</s:HGroup>
			<s:TileGroup id="optionalsGroup" width="204" height="48" horizontalGap="2" verticalGap="2">
				<s:ToggleButton width="48" height="48" name="{OptionalParameters.BURNING}" toolTip="Горящий" cornerRadius="10" />
				<s:ToggleButton width="48" height="48" name="{OptionalParameters.FLACKY}" icon="@Embed(source='/../assets/burning.png')" toolTip="Слоёный" cornerRadius="10" />
				<s:ToggleButton width="48" height="48" name="{OptionalParameters.WITH_ICE}" icon="@Embed(source='/../assets/burning.png')" toolTip="Со льдом" cornerRadius="10" />
				<s:ToggleButton width="48" height="48" name="{OptionalParameters.CHECKED}" icon="@Embed(source='/../assets/burning.png')" toolTip="Проверен администрацией" cornerRadius="10" />
				<s:ToggleButton width="48" height="48" name="{OptionalParameters.IBA}" icon="@Embed(source='/../assets/burning.png')" toolTip="Утвержден IBA" cornerRadius="10" />
			</s:TileGroup>
		</s:VGroup>
		<s:Line height="100%" xFrom="0" xTo="0">
			<s:stroke>
				<s:SolidColorStroke weight="2" color="{DesignModel.ORANGE_BEACH}" />
			</s:stroke>
		</s:Line>
		<s:VGroup width="100%" height="100%">
			<flextras:AutoCompleteComboBoxLite id="ingrChoose" itemRenderer="components.renderers.AutoCompleteRenderer" prompt="Добавить ингредиент..." width="200" labelField="name" dataProvider="{_model.ingredientsList}" change="combobox1_changeHandler(event)" filterFunction="filterCBList" />
			<s:List minWidth="200" width="100%" height="100%" borderVisible="false" labelField="name" itemRenderer="components.renderers.IngredientItemRenderer" dataProvider="{_model.ingredientsQueryList}" >
				<s:layout>
					<components:FlowLayout clipAndEnableScrolling="false" />
				</s:layout>
			</s:List>
		</s:VGroup>
	</s:HGroup>
	<s:Line width="100%" yFrom="0" yTo="0">
		<s:stroke>
			<s:SolidColorStroke weight="2" color="{DesignModel.ORANGE_BEACH}" />
		</s:stroke>
	</s:Line>
	<s:List id="recipesList" borderVisible="false" width="100%" height="100%" />
</s:Group>
