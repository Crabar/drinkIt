<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
				height="80" width="100%" autoDrawBackground="false" buttonMode="true" creationComplete="itemrenderer1_creationCompleteHandler(event)">
	<s:layout>
		<s:BasicLayout />
	</s:layout>
	
	<fx:Style source="/design/newStyle.css" />
	
	<s:states>
		<s:State name="normal" />
		<s:State name="hovered" />
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import design.DesignModel;
			
			import models.CocktailBuilderModel;
			import models.IngredientsModel;
			import models.TagsModel;
			import models.supportClasses.CocktailMini;
			
			import mx.collections.ArrayList;
			import mx.events.FlexEvent;
			
			import spark.components.List;
			import spark.skins.spark.DefaultItemRenderer;
			import spark.utils.TextFlowUtil;
			
			import views.CocktailBuilderView;
			
			private var _model:CocktailBuilderModel;
			
			[Bindable]
			private var _cocktail:CocktailMini;
			
			[Bindable]
			private var _ingredients:ArrayList;
			
			override public function set data(value:Object):void
			{
				if (value)
				{
					init();
					//
					_cocktail = CocktailMini(value);
					cocktailName.text = _cocktail.name;
					buildRecipe(_cocktail.cocktailIngredients);
					buildTags(_cocktail.cocktailTypeId, _cocktail.options);
				}
			}
			
			private function init():void
			{
				if (!_model)
					_model = CocktailBuilderView(List(owner).document).model;
			}
			
			protected function itemrenderer1_creationCompleteHandler(event:FlexEvent):void
			{
				init();
			}
			
			private function buildTags(cocktailType:int, options:Array):void
			{
				tagsGroup.removeAllElements();
				tagsGroup.addElement(TagsModel.instance.getTagByIdAndType(cocktailType, TagsModel.COCKTAIL_TYPE_TAG, 24));
				
				if (options)
				{
					for (var i:uint = 0; i < options.length; i++)
					{
						tagsGroup.addElement(TagsModel.instance.getTagByIdAndType(options[i], TagsModel.COCKTAIL_OPTION_TAG, 24));
					}
				}			
			
			}
			
			private function buildRecipe(ingredients:Array):void
			{
				_ingredients = new ArrayList();
				
				if (!ingredients || ingredients.length == 0)
					return;
					
				var item:Object;
				
				
				for (var i:uint = 0; i < ingredients.length; i++)
				{
					item = {id: ingredients[i][0], label: IngredientsModel.instance.getIngredientNameById(ingredients[i][0]).toLowerCase()};
					_ingredients.addItem(item);
				}
			}
			
			private function cocktailStructureItemRendererFunction(item:Object):IFactory
			{
				if (_model.isIngredientSelected(item.id))
					return new ClassFactory(SimpleIngredientItemRenderer);
				
				return new ClassFactory(DefaultItemRenderer);
			}


		]]>
	</fx:Script>
	
	<s:Rect width="100%" height="100%" bottomLeftRadiusX="10" bottomLeftRadiusY="10" bottomRightRadiusX="10" bottomRightRadiusY="10"
			topLeftRadiusX="10" topLeftRadiusY="10" topRightRadiusX="10" topRightRadiusY="10">
		<s:fill>
			<s:SolidColor color="{DesignModel.SAND_BEACH}" />
		</s:fill>
		<s:stroke>
			<s:SolidColorStroke color="{DesignModel.LIGHT_GREEN}" weight="3" alpha="0" alpha.hovered="1" />
		</s:stroke>
	</s:Rect>
	<s:HGroup x="0" y="0" width="100%" height="100%" paddingLeft="10" paddingBottom="5" paddingRight="5" paddingTop="5" gap="5">
		<s:BitmapImage id="cocktailThumb" width="48" height="64" source="{_cocktail.image}" />
		<s:VGroup gap="0">
			<s:Label id="cocktailName" styleName="headerPinkText" height="20" verticalAlign="middle" />
			<s:List id="cocktailStructure" labelField="label" height="20" borderVisible="false" itemRendererFunction="cocktailStructureItemRendererFunction" dataProvider="{_ingredients}">
				<s:layout>
					<s:HorizontalLayout gap="1" />
				</s:layout>
			</s:List>
			<s:HGroup id="tagsGroup" gap="2" height="24" />
		</s:VGroup>
	</s:HGroup>


</s:ItemRenderer>
