<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:views="views.*" creationPolicy="all"
			   applicationComplete="onApplicationCreationComplete(event)"
			   xmlns:components="components.*" minWidth="1024" preinitialize="application1_preinitializeHandler(event)" >
	<s:layout>
		<s:BasicLayout />
	</s:layout>
	<fx:Style source="/design/main_style.css" />
	<fx:Style source="/design/newStyle.css" />
	<fx:Script>
		<![CDATA[
        import controllers.AuthController;
        import controllers.MainController;
			
			import design.DesignModel;
			
			import models.MainModel;
			import models.UserInfoModel;
			import models.UserRoles;
			import models.events.AuthEvent;
			
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.managers.BrowserManager;
			import mx.managers.ToolTipManager;
			
			import spark.events.IndexChangeEvent;
			
			import utils.ServiceUtil;
			
			public const darkGreen:uint = DesignModel.DARK_GREEN;
			
			public const sandBeach:uint = DesignModel.SAND_BEACH;
			
			public const lightPink:uint = DesignModel.LIGHT_PINK;
			
			public const orangeBeach:uint = DesignModel.ORANGE_BEACH;
			
			public const lightGreen:uint = DesignModel.LIGHT_GREEN;
			
			[Bindable]
			private var _model:MainModel;
			
			protected function onApplicationCreationComplete(event:FlexEvent):void
			{				
				
				ToolTipManager.showDelay = 300;
				//
				_model = new MainModel();
				MainController.instance.model = _model;
				MainController.instance.initBrowserEngine();
				readFlashVars();
				UserInfoModel.instance.addEventListener(AuthEvent.AUTH_SUCCESS, onAuthChange);
				UserInfoModel.instance.addEventListener(AuthEvent.LOGOUT, onAuthChange);
                //
                var auth:AuthController = new AuthController();
                auth.tryLoginWithStoredUserCredentials();
			}
			
			private function onAuthChange(event:AuthEvent):void
			{
				menu.validateNow();
			}
			
			private function readFlashVars():void
			{
				if (parameters.hasOwnProperty("serviceAddress"))
					ServiceUtil.instance.init(parameters.serviceAddress);
			}
			
			
			protected function menu_changeHandler(event:IndexChangeEvent):void
			{
				MainController.instance.changeView(MainModel.VIEWS[event.newIndex], null);
			}

			protected function application1_preinitializeHandler(event:FlexEvent):void
			{
				readFlashVars();
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>

	</fx:Declarations>

	<fx:Binding twoWay="false" source="_model.currentView.id" destination="menu.selectedIndex" />

	<s:Rect width="100%" height="100%">
		<s:fill>
			<s:BitmapFill scaleX="1" scaleY="1" fillMode="repeat" alpha="0.7" source="@Embed(source='/../assets/new-pattern.png')" />
		</s:fill>
	</s:Rect>
	<s:VGroup gap="0" top="20" bottom="20" width="1024" height="100%" horizontalCenter="0">
		<components:Logo />
		<s:BorderContainer backgroundColor="0xffffff" width="100%" height="100%" borderVisible="false">
			<s:layout>
				<s:VerticalLayout paddingLeft="20" paddingTop="10" paddingRight="20" gap="5" />
			</s:layout>
			<s:TabBar id="menu" height="50" dataProvider="{viewstack1}"
					  change="menu_changeHandler(event)" skinClass="design.skins.tabbar.SimpleTabBarSkin"/>
			<s:Group width="100%" height="10">
				<s:Line top="0" left="0" right="0" yFrom="0" yTo="0">
					<s:stroke>
						<s:SolidColorStroke color="{DesignModel.LIGHT_GREEN}" weight="1" alpha="0.7" />
					</s:stroke>
				</s:Line>
				<s:Line top="3" left="0" right="0" yFrom="0" yTo="0" >
					<s:stroke>
						<s:SolidColorStroke color="{DesignModel.LIGHT_GREEN}" weight="1" alpha="0.7" />
					</s:stroke>
				</s:Line>
			</s:Group>
			<mx:ViewStack id="viewstack1" width="100%" height="100%">
				<components:ExtNavigationContent width="100%" height="100%" label="Конструктор">
					<views:CocktailBuilderView width="100%" height="100%" />
				</components:ExtNavigationContent>
				<components:ExtNavigationContent width="100%" height="100%" label="Коктейль" includeInBar="false">
					<views:CocktailView width="100%" height="100%" />
				</components:ExtNavigationContent>
				<components:ExtNavigationContent width="100%" height="100%" label="Мой бар">
					<views:MyBar width="100%" height="100%" />
				</components:ExtNavigationContent>
				<components:ExtNavigationContent width="100%" height="100%" label="Админ-панель" includeInBar="{UserInfoModel.instance.role == UserRoles.ADMIN}">
					<views:AdminPanelView width="100%" height="100%" />
				</components:ExtNavigationContent>
			</mx:ViewStack>
		</s:BorderContainer>
		
	</s:VGroup>
</s:Application>
